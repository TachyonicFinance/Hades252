var searchIndex = JSON.parse('{\
"hades252":{"doc":"","i":[[3,"BlsScalar","hades252","Represents an element of the scalar field $\\\\mathbb{F}_q$…",null,null],[12,"0","","",0,null],[0,"strategies","","Strategies implemented for the Hades252 algorithm. This…",null,null],[0,"gadget","hades252::strategies","Strategy for zero-knowledge plonk circuits",null,null],[3,"GadgetStrategy","hades252::strategies::gadget","Implements a Hades252 strategy for `Variable` as input…",null,null],[12,"cs","","A reference to the constraint system used by the gadgets",1,null],[17,"PI_SIZE","","Size of the generated public inputs for the permutation…",null,null],[11,"new","","Constructs a new `GadgetStrategy` with the constraint…",1,[[["standardcomposer",3]]]],[11,"hades_gadget","","Perform the hades permutation on a plonk circuit",1,[[["standardcomposer",3]]]],[11,"poseidon_gadget","","Perform the poseidon hash on a plonk circuit",1,[[["standardcomposer",3]],["variable",3]]],[11,"poseidon_slice_gadget","","Perform the poseidon slice hash on a plonk circuit",1,[[["standardcomposer",3]],["variable",3]]],[0,"scalar","hades252::strategies","Strategy for scalars",null,null],[3,"ScalarStrategy","hades252::strategies::scalar","Implements a Hades252 strategy for `BlsScalar` as input…",null,null],[11,"new","","Constructs a new `ScalarStrategy`.",2,[[]]],[8,"Strategy","hades252::strategies","Defines the Hades252 strategy algorithm.",null,null],[10,"quintic_s_box","","Computes `input ^ 5 (mod Fp)`",3,[[]]],[10,"mul_matrix","","Multiply the values for MDS matrix during the full rounds…",3,[[]]],[10,"add_round_key","","Add round keys to a set of `StrategyInput`.",3,[[]]],[11,"mul_matrix_partial_round","","Multiply the values for MDS matrix during the partial…",3,[[]]],[11,"apply_partial_round","","Applies a `Partial Round` also known as a `Partial S-Box…",3,[[]]],[11,"apply_full_round","","Applies a `Full Round` also known as a `Full S-Box layer`…",3,[[]]],[11,"perm","","Applies a `permutation-round` of the `Hades252` strategy.",3,[[]]],[11,"poseidon","","Perform a poseidon hash",3,[[]]],[10,"poseidon_slice","","Perform a slice strategy",3,[[]]],[17,"TOTAL_FULL_ROUNDS","hades252","Total ammount of full rounds that will be applied. This is…",null,null],[17,"PARTIAL_ROUNDS","","Total ammount of partial rounds that will be applied. This…",null,null],[17,"WIDTH","","Maximum input width for the rounds",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"conditional_negate","","",0,[[["choice",3]]]],[11,"from","hades252::strategies::gadget","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","hades252::strategies::scalar","",2,[[]]],[11,"into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"cmp","hades252","",0,[[["scalar",3]],["ordering",4]]],[11,"bitxor","","",0,[[["scalar",3]],["scalar",3]]],[11,"mul_assign","","",0,[[["scalar",3]]]],[11,"mul_assign","","",0,[[["scalar",3]]]],[11,"sum","","",0,[[],["scalar",3]]],[11,"eq","","",0,[[["scalar",3]]]],[11,"default","","",0,[[],["scalar",3]]],[11,"mul","","",0,[[["scalar",3]],["scalar",3]]],[11,"mul","","",0,[[["scalar",3]],["scalar",3]]],[11,"partial_cmp","","",0,[[["scalar",3]],[["option",4],["ordering",4]]]],[11,"bitand","","",0,[[["scalar",3]],["scalar",3]]],[11,"neg","","",0,[[],["scalar",3]]],[11,"add","","",0,[[["scalar",3]],["scalar",3]]],[11,"add","","",0,[[["scalar",3]],["scalar",3]]],[11,"product","","",0,[[],["scalar",3]]],[11,"from","","",0,[[],["scalar",3]]],[11,"clone","","",0,[[],["scalar",3]]],[11,"deserialize","","",0,[[],[["scalar",3],["result",4]]]],[11,"serialize","","",0,[[],["result",4]]],[11,"fmt","","",0,[[["formatter",3]],[["result",4],["error",3]]]],[11,"sub","","",0,[[["scalar",3]],["scalar",3]]],[11,"sub","","",0,[[["scalar",3]],["scalar",3]]],[11,"conditional_select","","",0,[[["choice",3],["scalar",3]],["scalar",3]]],[11,"ct_eq","","",0,[[["scalar",3]],["choice",3]]],[11,"add_assign","","",0,[[["scalar",3]]]],[11,"add_assign","","",0,[[["scalar",3]]]],[11,"sub_assign","","",0,[[["scalar",3]]]],[11,"sub_assign","","",0,[[["scalar",3]]]],[11,"quintic_s_box","hades252::strategies::gadget","",1,[[["variable",3]]]],[11,"mul_matrix","","Adds a constraint for each matrix coefficient multiplication",1,[[]]],[11,"mul_matrix_partial_round","","Multiply the values for MDS matrix in the partial round…",1,[[]]],[11,"add_round_key","","",1,[[]]],[11,"poseidon_slice","","Perform a slice strategy",1,[[],["variable",3]]],[11,"quintic_s_box","hades252::strategies::scalar","",2,[[["blsscalar",3]]]],[11,"mul_matrix","","",2,[[]]],[11,"add_round_key","","",2,[[]]],[11,"poseidon_slice","","Perform a slice strategy",2,[[],["blsscalar",3]]],[11,"default","","",2,[[],["scalarstrategy",3]]],[11,"zero","hades252","Returns zero, the additive identity.",0,[[],["scalar",3]]],[11,"one","","Returns one, the multiplicative identity.",0,[[],["scalar",3]]],[11,"internal_repr","","Returns the internal representation of the Scalar.",0,[[]]],[11,"double","","Doubles this field element.",0,[[],["scalar",3]]],[11,"from_bytes","","Attempts to convert a little-endian byte representation of…",0,[[],[["scalar",3],["ctoption",3]]]],[11,"to_bytes","","Converts an element of `Scalar` into a byte representation…",0,[[]]],[11,"from_bytes_wide","","Converts a 512-bit little endian integer into a `Scalar`…",0,[[],["scalar",3]]],[11,"from_raw","","Converts from an integer represented in little endian into…",0,[[],["scalar",3]]],[11,"random","","Generate a valid Scalar choosen uniformly using user-…",0,[[],["scalar",3]]],[11,"reduce","","Reduces the scalar and returns it multiplied by the…",0,[[],["scalar",3]]],[11,"square","","Squares this element.",0,[[],["scalar",3]]],[11,"sqrt","","Computes the square root of this element, if it exists.",0,[[],[["scalar",3],["ctoption",3]]]],[11,"pow","","Exponentiates `self` by `by`, where `by` is a…",0,[[],["scalar",3]]],[11,"pow_vartime","","Exponentiates `self` by `by`, where `by` is a…",0,[[],["scalar",3]]],[11,"invert","","Computes the multiplicative inverse of this element,…",0,[[],[["scalar",3],["ctoption",3]]]],[11,"mul","","Multiplies `rhs` by `self`, returning the result.",0,[[["scalar",3]],["scalar",3]]],[11,"sub","","Subtracts `rhs` from `self`, returning the result.",0,[[["scalar",3]],["scalar",3]]],[11,"add","","Adds `rhs` to `self`, returning the result.",0,[[["scalar",3]],["scalar",3]]],[11,"neg","","Negates `self`.",0,[[],["scalar",3]]],[11,"divn","","SHR impl",0,[[]]]],"p":[[3,"BlsScalar"],[3,"GadgetStrategy"],[3,"ScalarStrategy"],[8,"Strategy"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);